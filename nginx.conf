events {
    worker_connections 1024;
}

http {
    gzip on;
    gzip_comp_level 6;
    gzip_vary on;
    gzip_types text/plain text/css application/json application/x-javascript application/javascript text/xml application/xml application/rss+xml text/javascript image/svg+xml application/vnd.ms-fontobject application/x-font-ttf font/opentype;

    # Define cache path for both general and image caching
    proxy_cache_path /nginx_cache levels=1:2 keys_zone=my_cache:10m max_size=50m inactive=60m use_temp_path=off;
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=image_cache:10m max_size=100m inactive=24h use_temp_path=off;

    log_format customz '$request $upstream_cache_status';

    split_clients "${time_iso8601}" $a_or_b {
        50% siteA;
        50% siteB;
    }
#  upstream backend_servers {
#         server servera:4000;
#         server serverb:5000 weight=5;
#         server serverc:4200 backup;
#     }
    upstream backend_servers {
        server servera:4000;
        server serverb:5000;
        server serverc:4200;
    }

    server {
        listen 80;
        # listen 443 ssl;
        # http2 on;

        # ssl_certificate /certs/cert.pem;
        # ssl_certificate_key /certs/key.pem;

        location /site {
            return 301 /$a_or_b;
        }

        location /siteA {
            return 200 "A experience";
        }

        location /siteB {
            return 200 "B experience";
        }

        # Route all /users/ requests to the upstream servers
       location /api/ {
        proxy_pass http://backend_servers;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Caching
        proxy_cache my_cache;
        proxy_cache_valid 200 302 304 10m;
        proxy_cache_valid 404 1m;
        proxy_cache_min_uses 1;

        # CORS
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, Origin, X-Requested-With' always;

        if ($request_method = OPTIONS) {
            return 204;
        }
}

        # Add image caching for .jpg, .png, .gif
        location ~* \.(jpg|jpeg|png|gif|svg)$ {
            proxy_pass http://backend_servers;      # Forward to the backend
            proxy_cache image_cache;                # Use the image cache
            proxy_cache_valid 200 302 24h;          # Cache successful responses for 24 hours
            proxy_cache_valid 404 1m;               # Cache 404 responses for 1 minute
            expires 24h;                            # Set browser cache expiry for 24 hours

            add_header X-Cache-Status $upstream_cache_status;
            add_header Cache-Control "public, max-age=86400"; # Control browser cache
        }

        # Serve a simple index page at the root
         location / {
          root /usr/share/nginx/html;
          }
    }
}
