events {
    worker_connections 1024;
}

http {

  proxy_cache_path /nginx_cache levels=1:2 keys_zone=my_cache:10m max_size=50m inactive=60m use_temp_path=off;
  log_format customz `$request $upstream_cache_status`;
    upstream backend_servers {
        server servera:4000;
        server serverb:5000 weight=5;
        server serverc:4200 backup;
    }
    server {
        listen 80;
        listen 443 ssl;
        ssl_certificate /certs/cert.pem;
        ssl_certificate_key /certs/key.pem;

        # Route all /api/ requests to the upstream servers
        location /users/ {
            proxy_pass http://backend_servers; # Proxy to the upstream group
            proxy_http_version 1.1;  # Ensure HTTP 1.1 for things like keep-alive and WebSockets
            proxy_set_header Connection ""; # Forward the connection header for keep-alive

            # Forward client details to backend
              proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Enable caching
            proxy_cache my_cache;                    # Use the defined cache zone
            proxy_cache_valid 200 302 304 10m;           # Cache 200 and 302 responses for 10 minutes
            proxy_cache_valid 404 1m;                # Cache 404 responses for 1 minute
            proxy_cache_min_uses 1;                  # Cache after 1 use
            add_header X-Cache-Status $upstream_cache_status;  # Add cache status in response header
        }

        # Serve a simple index page at the root
        location / {
            return 200 "Welcome to Nginx proxy server.\n";
            add_header Content-Type text/plain;
        }
    }
}
